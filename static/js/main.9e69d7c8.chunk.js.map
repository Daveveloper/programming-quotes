{"version":3,"sources":["components/Title.js","components/Quote.js","components/Category.js","api/api.js","components/Hero.js","container/Main.js","components/footer.js","App.js","serviceWorker.js","index.js","hero.svg"],"names":["Title","title","className","Quote","data","en","author","id","style","Category","category","API_BASE","RANDOM_QUOTE","getRandomQuote","a","fetch","response","json","quote","Hero","src","logo","alt","Main","props","generateRandomQuote","setState","state","this","addToFavorites","type","onClick","size","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8TAaeA,EAXD,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACd,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,SACXD,GAEH,2BAAOC,UAAU,YAAjB,mBCcSC,EArBD,SAAC,GAA6B,IAAD,IAA3BC,KAAMC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,GAGhC,OACE,yBAAKL,UAAU,SAEXG,EACA,oCACE,0BAAMH,UAAU,eACd,0BAAMA,UAAU,iBAAhB,KAAyCG,GAE3C,uBAAGH,UAAU,iBAAb,KAAgCI,GAChC,0BAAME,MAAO,CAAC,QAAW,SAAUD,IAGrC,gBCNOE,EARE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACjB,OACE,oCACE,+BAAQA,KCLRC,EAAW,+CAEXC,GADU,UAAMD,EAAN,WACE,UAAMA,EAAN,mBAQX,SAAeE,IAAtB,+B,4CAAO,8BAAAC,EAAA,sEACmBC,MAAMH,GADzB,cACCI,EADD,gBAEeA,EAASC,OAFxB,cAECC,EAFD,yBAGEA,GAHF,4C,0CCCQC,EARF,WACX,OACE,6BAASjB,UAAU,QACjB,yBAAKkB,IAAKC,IAAMC,IAAI,iB,QC2CXC,E,YAxCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMPC,oBAPkB,sBAOI,4BAAAX,EAAA,sEACFD,IADE,OACfT,EADe,OAErB,EAAKsB,SAAS,CACZtB,SAHmB,2CALrB,EAAKuB,MAAQ,CACXvB,KAAM,IAHS,E,iFAejBwB,KAAKH,wB,+BAGG,IACDrB,EAAQwB,KAAKD,MAAbvB,KACP,OACE,0BAAMF,UAAU,QACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOD,MAAM,sBAEXG,EACA,oCACE,kBAAC,EAAD,CAAOA,KAAMA,EAAMyB,eAAgBD,KAAKC,iBACxC,kBAAC,EAAD,CAAUnB,SAAS,MAEnB,cAEJ,yBAAKR,UAAU,WACb,4BAAQ4B,KAAK,SAAS5B,UAAU,wBAAwB6B,QAASH,KAAKH,qBAAqB,kBAAC,IAAD,CAAWO,KAAM,KAA5G,uB,GAlCSC,a,QCeJC,EApBA,WACb,OACE,4BAAQhC,UAAU,UAChB,iCACE,8CACA,sDACA,iFACA,iCACE,oDACA,mEAGJ,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAS8B,KAAM,QCDRG,MATf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.9e69d7c8.chunk.js","sourcesContent":["import React from 'react'\n\nconst Title = ({title}) => {\n  return (\n    <div className=\"header\">\n      <h1 className=\"title\">\n        {title}\n      </h1>\n      <small className=\"designer\">By Dave Araya</small>\n    </div>\n  )\n}\n\nexport default Title\n","import React from 'react'\nconst Quote = ({data:{en, author, id}}) => {\n\n\n  return (\n    <div className=\"quote\">\n      {\n        en ?\n        <>\n          <cite className=\"quote__cite\">\n            <span className=\"quote__symbol\">\"</span>{en}\n          </cite>\n          <p className=\"quote__author\">- {author}</p>\n          <span style={{\"display\": \"none\"}}>{id}</span>\n        </>\n        :\n        \"Thinking...\"\n      }\n    </div>\n  )\n}\n\nexport default Quote;\n","import React from 'react'\n\nconst Category = ({category}) => {\n  return (\n    <>\n      <small>{category}</small>\n    </>\n  )\n}\n\nexport default Category\n","const API_BASE = 'https://programming-quotes-api.herokuapp.com';\nconst ALL_QUOTES = `${API_BASE}/quotes`;\nconst RANDOM_QUOTE = `${API_BASE}/quotes/random`;\n\nexport async function getAll() {\n  const response = await fetch(ALL_QUOTES);\n  const quotes = await response.json();\n  return quotes;\n}\n\nexport async function getRandomQuote() {\n  const response =  await fetch(RANDOM_QUOTE);\n  const quote = await response.json();\n  return quote;\n}\n","import React from 'react'\nimport logo from './../hero.svg';\n\nconst Hero = () => {\n  return (\n    <picture className=\"hero\">\n      <img src={logo} alt=\"programmer\"/>\n    </picture>\n  )\n}\n\nexport default Hero\n","import React, { Component } from 'react'\nimport Title from '../components/Title'\nimport Quote from '../components/Quote'\nimport Category from '../components/Category';\nimport { getRandomQuote } from '../api/api';\nimport Hero from '../components/Hero';\nimport {TiRefresh} from 'react-icons/ti';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    }\n  }\n\n   generateRandomQuote = async () => {\n    const data = await getRandomQuote();\n    this.setState({\n      data\n    })\n  }\n\n  componentDidMount() {\n    this.generateRandomQuote();\n  }\n\n  render() {\n    const {data} = this.state;\n    return (\n      <main className=\"Main\">\n        <Hero/>\n        <Title title=\"Programming Quote\" />\n        {\n          data ?\n          <>\n            <Quote data={data} addToFavorites={this.addToFavorites}/>\n            <Category category=\"\" />\n          </>\n          : \"Thinking...\"\n        }\n        <div className=\"actions\">\n          <button type=\"button\" className=\"Main__button-generate\" onClick={this.generateRandomQuote}><TiRefresh size={32}/> Random quote</button>\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default Main\n","import React from 'react'\nimport {FaReact} from 'react-icons/fa'\n\nconst Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <section>\n        <h3>About this App</h3>\n        <p>Developed with React.js</p>\n        <p>API: https://programming-quotes-api.herokuapp.com/</p>\n        <address>\n          <p>Developer: Dave Araya</p>\n          <p>Email: dave.webdeveloper@gmail.com</p>\n        </address>\n      </section>\n      <div className=\"logos\">\n        <FaReact size={48}/>\n\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react';\n\nimport './App.css';\nimport Main from './container/Main';\nimport Footer from './components/footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/hero.34bccda5.svg\";"],"sourceRoot":""}